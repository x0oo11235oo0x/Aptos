import http from 'http';
import fs from 'fs';
import path from 'path';
import swaggerUI from 'swagger-ui-express';
import jsYaml from 'js-yaml';
import express from 'express';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import bodyParser from 'body-parser';
import createRouter from './router/router';
import logger from './logger';

class ExpressServer {
  port: number;

  app: express.Express;

  openApiPath: string;

  schema: any;

  server: undefined;

  constructor(port: number, openApiYaml: string) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      this.schema = jsYaml.load(fs.readFileSync(openApiYaml, 'utf8'));
    } catch (e: any) {
      logger.error('failed to start Express Server', e.message);
    }
    this.setupMiddleware();
  }

  setupMiddleware() {
    // this.setupAllowedMedia();
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    // Simple test to see that the server is up and responding
    this.app.get('/hello', (req, res) => res.send(`Hello World. path: ${this.openApiPath}`));
    // Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/v1/openapi', (req, res) => res.sendFile((path.join(__dirname, 'api/v1', 'openapi.yaml'))));
    this.app.get('/openapi', (req, res) => res.sendFile((path.join(__dirname, 'api/v1', 'openapi.yaml'))));
    this.app.get('/v1/spec.html', (req, res) => res.sendFile((path.join(__dirname, 'api/v1', 'spec.html'))));
    this.app.get('/spec.html', (req, res) => res.sendFile((path.join(__dirname, 'api/v1', 'spec.html'))));

    // View the openapi document in a visual interface. Should be able to test from this page
    this.app.use('/v1/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));
    this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));
    this.app.use('/v1', createRouter({ schema: this.schema }));
    this.app.use(createRouter({ schema: this.schema }));
  }

  launch() {
    http.createServer(this.app).listen(this.port);
  }

  async close() {
    if (this.server !== undefined) {
      await (this.server as any).close();
      // eslint-disable-next-line no-console
      console.log(`Server on port ${this.port} shut down`);
    }
  }
}

export default ExpressServer;
